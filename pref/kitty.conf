# vim:fileencoding=utf-8:foldmethod=marker

font_family      Iosevka Nerd Font
bold_font        auto
italic_font      auto
bold_italic_font auto
#: run `kitten choose-fonts` 
#: <https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-syntax>.

font_size 12.0
force_ltr no
#: symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols
#:     symbol_map codepoints Font Family Name

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1
#:     narrow_symbols codepoints [optionally the number of cells]

# disable_ligatures never
#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

font_features none
#:     font_features FiraCode-Retina +zero +onum
#:     font_features FiraCode-Bold +zero
#:     font_features TT2020StyleB-Regular -liga +calt
#:     font_features UnifontMedium +isol -medi -fina -init

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px
#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

# box_drawing_scale 0.001, 1, 1.5, 2
# undercurl_style thin-sparse
# text_composition_strategy platform
# text_composition_strategy 1.0 0
# text_fg_override_threshold 0

#: WARNING: Some programs use characters (such as block characters)
#: for graphics display and may expect to be able to set the
#: foreground and background to the same color (or similar colors).
#: If you see unexpected stripes, dots, lines, incorrect color, no
#: color where you expect color, or any kind of graphic display
#: problem try setting text_fg_override_threshold to 0 to see if this
#: is the cause of the problem.

# cursor #cccccc

# cursor_text_color #111111
# cursor_shape block
# cursor_shape_unfocused hollow
# cursor_beam_thickness 1.5
# cursor_underline_thickness 2.0
# cursor_blink_interval -1
# cursor_stop_blinking_after 15.0
# cursor_trail 0
# cursor_trail_decay 0.1 0.4
# cursor_trail_start_threshold 2
# scrollback_lines 2000
# scrollback_indicator_opacity 1.0
# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
# scrollback_pager_history_size 0
# scrollback_fill_enlarged_window no
# wheel_scroll_multiplier 5.0
# wheel_scroll_min_lines 1
# touch_scroll_multiplier 1.0
# mouse_hide_wait 3.0
# url_color #0087bd
# url_style curly
# open_url_with default
# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh
# detect_urls yes
# url_excluded_characters
# show_hyperlink_targets no
# underline_hyperlinks hover
copy_on_select yes
#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#quote-urls-at-prompt, replace-dangerous-control-codes, replace-newline, confirm, confirm-if-large, filter, no-op
# paste_actions quote-urls-at-prompt,confirm
# strip_trailing_spaces never
# select_by_word_characters @-./_~?&=%+#
# select_by_word_characters_forward
# click_interval -1.0
# focus_follows_mouse no
# pointer_shape_when_grabbed arrow
# default_pointer_shape beam
# pointer_shape_when_dragging beam
#: .. code-block:: none
#:     mouse_map button-name event-type modes action
#:     mouse_map left click ungrabbed
# clear_all_mouse_actions no

# mouse_map left click ungrabbed mouse_handle_click selection link prompt
# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt
# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link
# mouse_map ctrl+shift+left press grabbed discard_event
# mouse_map middle release ungrabbed paste_from_selection
# mouse_map left press ungrabbed mouse_selection normal
# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle
# mouse_map left doublepress ungrabbed mouse_selection word
# mouse_map left triplepress ungrabbed mouse_selection line
# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point
# mouse_map right press ungrabbed mouse_selection extend
# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event
# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal
# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle
# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word
# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line
# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point
# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend
# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

# repaint_delay 10
# input_delay 3
sync_to_monitor yes
enable_audio_bell no
# visual_bell_duration 0.0
# visual_bell_color none
# window_alert_on_bell yes
# bell_on_tab "ðŸ”” "
# command_on_bell none #KITTY_CHILD_CMDLINE
# bell_path none
# linux_bell_theme __custom

#: To change your sound theme desktop wide, create
#: ~/.local/share/sounds/__custom/index.theme` with the
#: contents:
#:     [Sound Theme]
#:     Inherits=name-of-the-sound-theme-you-want-to-use

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400
# enabled_layouts *
# window_resize_step_cells 2
# window_resize_step_lines 2
# window_border_width 0.5pt
# draw_minimal_borders yes
# window_margin_width 0
# single_window_margin_width -1
# window_padding_width 0
# single_window_padding_width -1
# placement_strategy center

# active_border_color #00ff00
# inactive_border_color #cccccc
# bell_border_color #ff5a00
# inactive_text_alpha 1.0
# hide_window_decorations no
# window_logo_path none
# window_logo_position bottom-right
# window_logo_alpha 0.5
# window_logo_scale 0
# resize_debounce_time 0.1 0.5
# resize_in_steps no
# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set 0-9A-Z\-=[];',./\\`. Specify your
#: preference as a string of characters.

confirm_os_window_close 0 
#-1 to enable with shell prompt

# tab_bar_edge bottom
# tab_bar_margin_width 0.0
# tab_bar_margin_height 0.0 0.0

# fade, slant, separator, powerline, custom, hidden
# tab_bar_style fade

# tab_bar_align left
# tab_bar_min_tabs 2
# tab_switch_strategy previous
# tab_fade 0.25 0.5 0.75 1
# tab_separator " â”‡"
# tab_powerline_style angled
# tab_activity_symbol none
# tab_title_max_length 0
# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{tab.last_focused_progress_percent}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use tab.active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     tab.active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.
#: tab.last_focused_progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from the most recently focused window in the tab. Empty string if no progress is reported.
#: tab.progress_percent
#:     If a command running in a window reports the progress for a task, show this progress as a percentage
#:     from all windows in the tab, averaged. Empty string is no progress is reported.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: The 256 eight terminal colors can be used as `fmt.fg.color0`
#: through `fmt.fg.color255`. Note that for backward compatibility, if
#: {bell_symbol} or {activity_symbol} are not present in the template,
#: they are prepended to it.

# active_tab_title_template none
# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal
# tab_bar_background none
# tab_bar_margin_color none

# foreground #dddddd
# background #000000
background_opacity 1.0
# background_blur 0
#background_image /home/rose/Pictures/e7/fcc_seeking.png
background_image none
#tiled, mirror-tiled, scaled, clamped, centered, cscaled
background_image_layout cscaled
# background_image_linear no
# transparent_background_colors
# transparent_background_colors red@0.5 #00ff00@0.3
# dynamic_background_opacity no
# background_tint 0.0
# background_tint_gaps 1.0
# dim_opacity 0.4
# selection_foreground #000000
# selection_background #fffacd

# color0 #000000
# color8 #767676
# color1 #cc0403
# color9 #f2201f
# color2  #19cb00
# color10 #23fd00
# color3  #cecb00
# color11 #fffd00
# color4  #0d73cc
# color12 #1a8fff
# color5  #cb1ed1
# color13 #fd28ff
# color6  #0dcdcd
# color14 #14ffff
# color7  #dddddd
# color15 #ffffff
# mark1_foreground black
# mark1_background #98d3cb
# mark2_foreground black
# mark2_background #f2dcd3
# mark3_foreground black
# mark3_background #f274bc
# shell .
# editor .
# close_on_child_death no
# remote_control_password
#:     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab
#:     remote_control_password "my passphrase" set-tab-* resize-*

#:     kitten @ --help
#:     remote_control_password "" *-colors
#:     remote_control_password "my passphrase" my_rc_command_checker.py

#: password, socket-only, socket, no, yes
# allow_remote_control no
# listen_on none
#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b

# filter_notification
#:     filter_notification title:hello or body:"abc.*def"
#:     # filter out notification from vim except for ones about updates, (?i)
#:     # makes matching case insensitive.
#:     filter_notification app:"[ng]?vim" and not body:"(?i)update"
#:     # filter out all notifications
#:     filter_notification all
# watcher
# exe_search_path

#: Control where kitty finds the programs to run. The default search
#: order is: First search the system wide PATH, then ~/.local/bin and
#: ~/bin. If still not found, the PATH defined in the login shell
#: after sourcing all its startup files is tried. Finally, if present,
#: the PATH specified by the env option is tried.
#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

# update_check_interval 24
# startup_session none
# clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask
# clipboard_max_size 512
# file_transfer_confirmation_bypass
# allow_hyperlinks yes
# shell_integration enabled
# allow_cloning ask
# clone_source_strategies venv,conda,env_var,path

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. The supported strategies are:

#: venv
#:     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#:     Python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#:     environments created by conda.
#: env_var
#:     Execute the contents of the environment variable
#:     KITTY_CLONE_SOURCE_CODE with eval.
#: path
#:     Source the file pointed to by the environment variable
#:     KITTY_CLONE_SOURCE_PATH.

#never, unfocused, invisible, always
# notify_on_cmd_finish never
# notify, bell, command
#: There are two optional arguments:
#:     # Send a notification when a command takes more than 5 seconds in an unfocused window
#:     notify_on_cmd_finish unfocused
#:     # Send a notification when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0
#:     # Ring a bell when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0 bell
#:     # Run 'notify-send' when a command takes more than 10 seconds in a invisible window
#:     # Here %c is replaced by the current command line and %s by the job exit code
#:     notify_on_cmd_finish invisible 10.0 command notify-send "job finished with status: %s" %c
#:     # Do not clear previous notification when next command finishes or window regains focus
#:     notify_on_cmd_finish invisible 5.0 notify

# term xterm-kitty
# terminfo_type path
# forward_stdio no
#:    menu_map global "Actions::Launch something special" launch --hold --type=os-window sh -c "echo hello world"
# wayland_titlebar_color system
# macos_titlebar_color system
# macos_option_as_alt no
# macos_hide_from_tasks no
# macos_quit_when_last_window_closed no
# macos_window_resizable yes
# macos_thicken_font 0
# macos_traditional_fullscreen no
# macos_show_window_title_in all
# macos_menubar_title_max_length 0
# macos_custom_beam_cursor no
# macos_colorspace srgb
# linux_display_server auto
# wayland_enable_ime yes

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, âŒƒ), shift (â‡§), alt
#: (opt, option, âŒ¥), super (cmd, command, âŒ˜).

#: Simple shortcut mapping is done with the map directive. For full
#: details on advanced mapping including modal and per application
#: maps, see mapping <https://sw.kovidgoyal.net/kitty/mapping/>. Some
#: quick examples to illustrate common tasks::

#:     # unmap a keyboard shortcut, passing it to the program running in kitty
#:     map kitty_mod+space
#:     # completely ignore a keyboard event
#:     map ctrl+alt+f1 discard_event
#:     # combine multiple actions
#:     map kitty_mod+e combine : new_window : next_layout
#:     # multi-key shortcuts
#:     map ctrl+x>ctrl+y>z action

#: The full list of actions that can be mapped to key presses is
#: available here <https://sw.kovidgoyal.net/kitty/actions/>.

kitty_mod alt
clear_all_shortcuts no
#: E.g. action_alias launch_tab launch --type=tab --cwd=current
#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs
#:     action_alias hints kitten hints --hints-offset=0
#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above, but specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

map ctrl+shift+c       copy_to_clipboard
map ctrl+shift+v       paste_from_clipboard
map shift+insert paste_from_selection

# map kitty_mod+s  paste_from_selection
# map kitty_mod+o pass_selection_to_program
map kitty_mod+o pass_selection_to_program firefox
#::      map kitty_mod+y new_window less @selection

# map kitty_mod+up    scroll_line_up
# map kitty_mod+k     scroll_line_up
# map opt+cmd+page_up scroll_line_up
# map cmd+up          scroll_line_up
# map kitty_mod+down    scroll_line_down
# map kitty_mod+j       scroll_line_down
# map opt+cmd+page_down scroll_line_down
# map cmd+down          scroll_line_down
# map kitty_mod+page_up scroll_page_up
# map cmd+page_up       scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map cmd+page_down       scroll_page_down
# map kitty_mod+home scroll_home
# map cmd+home       scroll_home
# map kitty_mod+end scroll_end
# map cmd+end       scroll_end
# map kitty_mod+z scroll_to_prompt -1

#::  Use a parameter of 0 for scroll_to_prompt to scroll to the last
#::  jumped to or the last clicked position. Requires shell
#::  integration <https://sw.kovidgoyal.net/kitty/shell-integration/>
#::  to work.
# map kitty_mod+x scroll_to_prompt 1
# map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen and history
#::  buffer as STDIN to an arbitrary program using launch --stdin-
#::  source. For example, the following opens the scrollback buffer in
#::  less in an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R
# map kitty_mod+g show_last_command_output
#::      map f1 show_first_command_output_on_screen
#::      map f1 show_last_visited_command_output
#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R
# map kitty_mod+enter new_window
# map cmd+enter       new_window
#::      map kitty_mod+y launch mutt
#::      map ctrl+alt+enter launch --cwd=current
#::      map ctrl+enter launch --allow-remote-control some_program
#::      map ctrl+n launch --location=neighbor
#::      map ctrl+f launch --location=first
# map kitty_mod+n new_os_window
# map cmd+n       new_os_window
# map kitty_mod+w close_window
# map shift+cmd+d close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

# map kitty_mod+1 first_window
# map cmd+1       first_window
# map kitty_mod+2 second_window
# map cmd+2       second_window
# map kitty_mod+3 third_window
# map cmd+3       third_window
# map kitty_mod+4 fourth_window
# map cmd+4       fourth_window
# map kitty_mod+5 fifth_window
# map cmd+5       fifth_window
# map kitty_mod+6 sixth_window
# map cmd+6       sixth_window
# map kitty_mod+7 seventh_window
# map cmd+7       seventh_window
# map kitty_mod+8 eighth_window
# map cmd+8       eighth_window
# map kitty_mod+9 ninth_window
# map cmd+9       ninth_window
# map kitty_mod+0 tenth_window

# map kitty_mod+f7 focus_visible_window
# map kitty_mod+f8 swap_with_window
# map kitty_mod+right next_tab
# map shift+cmd+]     next_tab
# map ctrl+tab        next_tab
# map kitty_mod+left previous_tab
# map shift+cmd+[    previous_tab
# map ctrl+shift+tab previous_tab
# map kitty_mod+t new_tab
# map cmd+t       new_tab

# map kitty_mod+q close_tab
# map cmd+w       close_tab

# map shift+cmd+w close_os_window

# map kitty_mod+. move_tab_forward
# map kitty_mod+, move_tab_backward
# map kitty_mod+alt+t set_tab_title
# map shift+cmd+i     set_tab_title
#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2
#:     map ctrl+t new_tab !neighbor [optional cmd to run]
# map kitty_mod+l next_layout
#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack
#:     map ctrl+alt+p last_used_layout
#:     map ctrl+alt+z toggle_layout stack

# map kitty_mod+equal  change_font_size all +2.0
# map kitty_mod+plus   change_font_size all +2.0
# map kitty_mod+kp_add change_font_size all +2.0
# map cmd+plus         change_font_size all +2.0
# map cmd+equal        change_font_size all +2.0
# map shift+cmd+equal  change_font_size all +2.0

# map kitty_mod+minus       change_font_size all -2.0
# map kitty_mod+kp_subtract change_font_size all -2.0
# map cmd+minus             change_font_size all -2.0
# map shift+cmd+minus       change_font_size all -2.0

# map kitty_mod+backspace change_font_size all 0
# map cmd+0               change_font_size all 0

#:     map kitty_mod+f6 change_font_size all 10.0
#:     map kitty_mod+f6 change_font_size current 10.0


#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e open_url_with_hints
# map kitty_mod+p>f kitten hints --type path --program -
# map kitty_mod+p>shift+f kitten hints --type path
# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.
# map kitty_mod+p>w kitten hints --type word --program -
# map kitty_mod+p>h kitten hints --type hash --program -
# map kitty_mod+p>n kitten hints --type linenum
# map kitty_mod+p>y kitten hints --type hyperlink
map kitty_mod+f1 show_kitty_doc overview

# map cmd+f    toggle_fullscreen
# map kitty_mod+f10 toggle_maximized
# map opt+cmd+s toggle_macos_secure_keyboard_entry
# map kitty_mod+u    kitten unicode_input
# map ctrl+cmd+space kitten unicode_input
# map kitty_mod+f2 edit_config_file
# map cmd+,        edit_config_file
# map kitty_mod+escape kitty_shell window
# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

map kitty_mod+delete clear_terminal reset active
# map opt+cmd+r        clear_terminal reset active

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything on screen up to the line with the cursor or the start of the current prompt (needs shell integration)
#::      map f1 clear_terminal to_cursor active
#::      # Same as above except cleared lines are moved into scrollback
#::      map f1 clear_terminal to_cursor_scroll active

#::      clear-only-screen() {
#::          printf "\e[H\e[2J"
#::      }

#::      clear-screen-and-scrollback() {
#::          printf "\e[H\e[3J"
#::      }

#::      clear-screen-saving-contents-in-scrollback() {
#::          printf "\e[H\e[22J"
#::      }

#::  For instance, using these escape codes, it is possible to remap
#::  Ctrl+L to both scroll the current screen contents into the
#::  scrollback buffer and clear the screen, instead of just clearing
#::  the screen. For ZSH, in ~/.zshrc, add:
#::      ctrl_l() {
#::          builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
#::          builtin zle .reset-prompt
#::          builtin zle -R
#::      }
#::      zle -N ctrl_l
#::      bindkey '^l' ctrl_l

#map ctrl+k clear_terminal to_cursor active
# map option+cmd+k clear_terminal scrollback active

map ctrl+l clear_terminal to_cursor_scroll active
map kitty_mod+f5 load_config_file
#map f5 load_config /path/to/alternative/kitty.conf

# map kitty_mod+f6 debug_config
# map opt+cmd+,    debug_config

# map ctrl+shift+alt+h send_text all Hello World

#::      map ctrl+alt+a send_text all Special text

#::      map ctrl+alt+a send_text normal Word\e[H
#::      map ctrl+alt+a send_text application Word\eOH
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

# map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/
# map cmd+h hide_macos_app
# map opt+cmd+h hide_macos_other_apps
# map cmd+m minimize_macos_window
# map cmd+q quit
