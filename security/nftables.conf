#!/usr/sbin/nft -f
flush ruleset

table inet max_secu {
	set LANv4 { 
		type ipv4_addr; flags interval;
              	elements = { 0.0.0.0, 192.168.122.0/24, 192.168.1.0/28, 169.254.0.0/16, 10.0.55.0/16, 172.20.0.0/16, 172.19.0.0/16, 172.18.0.0/16, 172.17.0.0/16 }
      	}

	set strictLANv4 {
		type ipv4_addr; flags interval;
              	elements = { 192.168.1.10, 192.168.1.2 }
      	}

	set docker {
		type ipv4_addr; flags interval;
              	elements = { 172.19.0.0/16, 172.18.0.0/16, 172.17.0.0/16 }
      	}
	
	set libvirt-nat {
		type ipv4_addr; flags interval;
              	elements = { 192.168.122.0/24 }
      	}
	set libvirt-internal {
		type ipv4_addr; flags interval;
              	elements = { 10.0.55.0/16 }
      	}
      
      	set LANv6 { 
		type ipv6_addr; flags interval;
              	elements = { fd00::/8, fe80::/10 }
      	}
	
      	set blackhole_ipv4 	{ type ipv4_addr; flags dynamic, timeout; timeout 10m; size 65536; }
      	set blackhole_ipv6 	{ type ipv6_addr; flags dynamic, timeout; timeout 10m; size 65536; }
      	set https 		{ type ipv4_addr; flags dynamic; size 65536; timeout 60m; }
		
      	chain my_input_lan {
              meta l4proto { tcp, udp } th dport { 67, 53, 2049} accept comment "Accept NFS,DNS,DHCP"
              udp dport { netbios-ns, netbios-dgm } accept comment "Accept NetBIOS Name Service (nmbd) and NetBIOS datagram service (nmbd)"
              tcp dport netbios-ssn accept comment "Accept NetBIOS Session Service (smbd)"
              tcp dport { http, https, 3080, 8080, 21, 22, 9090, 8443, 6443, 5000-6000, 18080, 28080, 3000, 9113, 8553 } accept
              udp dport { 1023, 5000-6000, tftp } accept
	      ip protocol icmp accept
      	}

      	chain my_input {
              type filter hook input priority filter; policy drop;
              ct state invalid drop comment "Drop invalid connections"
              ct state established,related accept comment "Accept traffic originated from us"
              ct state new tcp dport 443 update @https { ip saddr counter }
              ct state new tcp dport {22, 443} \
                            meter flood_ipv4 size 128000 { ip saddr timeout 10s limit rate over 10/second } \
                            log prefix "nftables [BLACKHOLE]: " \
                            add @blackhole_ipv4 { ip saddr timeout 3m }
              ct state new tcp dport {22,443} \
                      meter flood_ipv6 size 128000 { ip6 saddr and ffff:ffff:ffff:ffff:: timeout 10s limit rate over 10/second } \
                      log prefix "nftables [BLACKHOLE]: " \
                      add @blackhole_ipv6 { ip6 saddr and ffff:ffff:ffff:ffff:: timeout 3m }
              ip saddr @blackhole_ipv4 tcp flags syn counter drop
              ip6 saddr and ffff:ffff:ffff:ffff:: @blackhole_ipv6 counter drop
              iif lo accept comment "Accept any localhost traffic"
              fib daddr . iif type != { local, broadcast, multicast } drop comment "Drop if the dest IP is not configured on the incoming interface (strong host model)"
	      iif br-ex ip saddr 192.168.1.0/24 ip daddr 192.168.1.5 icmp type echo-request accept comment "Allow VM ICMP to host via br-ex"
              ip saddr @LANv4 jump my_input_lan comment "Connections from private IPv4"
              ip6 saddr @LANv6 jump my_input_lan comment "Connections from private IPv6"
              log prefix "nftables drop [INPUT]: " level warn flags ip options
      	}

      	chain my_forward {
              type filter hook forward priority filter; policy accept;
              ip saddr @strictLANv4 ip daddr @libvirt-nat ct state new,established accept
              ip saddr @strictLANv4 ip daddr @libvirt-internal ct state new,established accept	      
              ip saddr @libvirt-nat ip daddr @strictLANv4 ct state new,established,related accept
              #ip saddr @libvirt-internal ip daddr @strictLANv4 ct state established,related accept	      
	      ip saddr @libvirt-nat accept
	      ip daddr @libvirt-nat accept
	      ip saddr 192.168.1.0/24 ip daddr @docker ct state new,established accept
	      ip saddr @docker ct state new,established accept
              log prefix "nftables drop [FORWARD]: " level warn flags ip options
      	}

      	chain my_output { type filter hook output priority filter; policy accept; }
}

# Required so VM/container can use host's connection. 
# Use set docker and libvirt-nat thanks!
table ip for_nat {
	set docker {
		type ipv4_addr; flags interval;
              	elements = { 172.19.0.0/16, 172.18.0.0/16, 172.17.0.0/16 }
      	}
        
        set ovs-br-int {
		type ipv4_addr; flags interval;
		elements = { 192.168.1.0/24 }
	}
	
	set libvirt-nat {
		type ipv4_addr; flags interval;
              	elements = { 192.168.122.0/24 }
      	}
    	chain my_postrouting {
          	type nat hook postrouting priority srcnat; policy accept;
          	ip saddr @libvirt-nat masquerade;
          	ip saddr @docker masquerade;
		ip saddr @ovs-br-int ip daddr @libvirt-nat masquerade;
		#ip saddr @ovs-br-int ip daddr @libvirt-nat snat to 192.168.1.5
              	log prefix "nftables drop [NAT]: " level warn flags ip options
    	}
}
